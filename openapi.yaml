openapi: 3.0.0
info:
  title: Agent API
  description: |
    The Neuron® publishes an Agent API that can be used by agents that do not wish to, or are able
    to, connect to the Neuron® via any of the XMPP bindings available, such as standard binary 
    socket, websocket or Synchronous HTTP (BOSH). Via the Agent API, the agent is permitted to do 
    basic tasks, such as send messages, create Agent IDs, and sign contracts with such Agent IDs. 
    The Full API is
  version: 1.0.0
servers:
  - url: https://{domain}
    description: Sample Server
    variables:
      domain:
        default: localhost
        description: This variable determines the domain of the API
paths:
  /Agent/Account/DomainInfo:
    get:
      summary: Get Domain Info
      description: |
        Gets human-readable information
        about the domain of the server. The request can be made anonymously. No authentication is 
        required. This resource is typically called in the beginning of an on-boarding process, 
        where the user is given a choice to select service provider (i.e. domain).
      operationId: getDomainInfo
      tags:
        - Account
      parameters:
        - in: header
          name: Accept-Language
          description: The Accept-Language is used to select which language to use for human-readable strings returned.
          required: false
          schema:
            type: string
            default: en
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DomainInfoResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/DomainInfoResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Account/Create:
    post:
      summary: Create Account
      description: |
        Creates an agent account on the server (and logs in to it). This account can be used 
        when logging in, using the Agent API, but also to connect to the Neuron(R) using any of 
        the available XMPP bindings available. The account that is created, is considered a 
        regular XMPP account on the broker.

        When first created, the account is in a disabled state. You need to validate the
        e-mail address provided in the request first, before the account can be enabled.
        An e-mail with a verification code will be sent to the e-mail address provided in
        the request.

        **Security Notice**: This resource requires an API Key and Secret to be provided.
        These are [requested from the operator]({domain}/RequestApiKey.md) and must be protected.
        If compromized, the operator can choose to disable the key. This resource should
        therefore only be used by clients that can protect such credentials. If creating 
        an account in an environment where protecting such credentials is not possible 
        (such as a web page running on a client browser), use the 
        [CreateWebForm]({domain}/CreateWebForm.md) resource instead. Each API Key is given a number 
        of accounts that can be created with that key. If that limit is reached, no more 
        accounts can be created using that key, until the limit is increased or existing
        accounts created by that API Key is deleted.

        Input Parameters
        -------------------

        | Parameter    | Description |
        |-------------|------------|
        | `PUserName`  | User Name of the account to create. |
        | `PEMail`     | e-Mail address of the user. |
        | `PPassword`  | Password to use. |
        | `PApiKey`    | API Key to use, to get privileges to create an account. |
        | `PNonce`     | A unique random string, at least 32 characters long, with sufficient entropy to not be reused again. If reused, an error will be returned. |
        | `PSignature` | Cryptographic signature of request. |
        | `PSeconds`   | Requested number of seconds before the JWT token that will be issued expires. |

        Response Parameters
        -----------------------

        | Parameter   | Description |
        |------------|------------|
        | `PCreated`  | When account was created (server timestamp). |
        | `PEnabled`  | If account is enabled or not. When creating an account, it's disabled by default, until the e-mail address has been validated. |
        | `PCanRelay` | If account can be used to relay e-mails. |
        | `PJwt`      | A token representing the login to the account. This token is seant as a [Bearer token](https://www.rfc-editor.org/rfc/rfc6750) in requests requiring authentication. |
        | `PExpires`  | When the JWT token expires. The token needs to be renewed before this token expires, if the client wishes to maintain the connection. After the token expires, the client needs to login again. |

        **Note**: If trying to create an account that already exists, and that is enabled, but 
        using the same password as the existing account, and if PLAIN authentication is permitted
        on the server, the request will be treated as a login request. The timestamp of the 
        creation of the account can be seen in the response to the request.

        Calculating Signature
        ------------------------

        The signature in `PSignature` is calculated as follows.

        1. Concatenate the strings `PUserName ":" Host ":" PEMail ":" PPassword ":" PApiKey ":" PNonce`
        and call it `s`, where `Host` is the host/domain name of the server. It is taken from
        the HTTP `Host` request header, so it must be the same as is used in the URL of the
        request.

        2. UTF-8 encode the *secret* corresponding to the API key, and call it `Key`.

        3. UTF-8 encode the string `s`, and call it `Data`.

        4. Calculate the HMAC-SHA256 signature using `Key` and `Data`, and call it `H`.

        5. Base64-encode `H`. The result is the signature of the request.

        Signature Audits
        -------------------

        Signatures are audited. If too many failed signature attempts are received in a row from
        a given remote endpoint, that endpoint will be temporarily blocked from further
        attempts. Error message will contain a timestamp when new attempts can be made.
        If continuing failing, a remote endpoint may become permanently blocked from accessing
        the API.

        Alternative Name Suggestions
        -------------------------------

        If unable to create an account, suggestions for alternative account names will be returned as
        HTTP headers, with header names `X-AlternativeNameN`, where N is a random number starting with
        `1`. Digits will be two or more digits.
      operationId: createAccount
      tags:
        - "Account"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAccountBody"
            example:
              userName: Required(Str(PUserName)),
              eMail: Required(Str(PEMail)),
              password: Required(Str(PPassword)),
              apiKey: Required(Str(PApiKey)),
              nonce: Required(Str(PNonce)),
              signature: Required(Str(PSignature)),
              seconds: Required(Int(0 < PSeconds <= 3600))
          application/xml:
            schema:
              $ref: "#/components/schemas/CreateAccountBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreateAccountResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/CreateAccountResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Account/GetSessionToken:
    post:
      summary: Get newly created account created using a web form
      description: Allows the client to get session information about a newly created account, created using a web form, without having to provide user credentials again.
      operationId: getSessionToken
      tags:
        - Account
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetSessionTokenBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetSessionTokenBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetSessionTokenResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetSessionTokenResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Account/VerifyEMail:
    post:
      summary: Verify E-Mail
      operationId: verifyEMail
      tags:
        - Account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyEMailBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/VerifyEMailBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VerifyEMailResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/VerifyEMailResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Account/Login:
    post:
      summary: Login
      operationId: login
      tags:
        - Account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/LoginBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Account/WwwLogin:
    post:
      summary: Login
      operationId: wwwLogin
      tags:
        - Account
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WwwLoginBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/WwwLoginBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
      security:
        - WwwAuth: []
  /Agent/Account/Refresh:
    post:
      summary: Refresh
      operationId: refresh
      tags:
        - Account
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/RefreshBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Account/Logout:
    post:
      summary: Logout
      operationId: logout
      tags:
        - Account
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LogoutBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/LogoutBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AckResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/AckResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Account/Recover:
    post:
      summary: Recover Account
      operationId: recover
      tags:
        - Account
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RecoverBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/RecoverBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecoverResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/RecoverResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Xmpp/SendTextMessage:
    post:
      summary: Send Text Message
      description: Allows the client to send a plain text chat message from its account to an XMPP recipient.
      operationId: sendTextMessage
      tags:
        - XMPP
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendTextMessageBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/SendTextMessageBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StanzaResult"
            application/xml:
              schema:
                $ref: "#/components/schemas/StanzaResult"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Xmpp/SendFormattedMessage:
    post:
      summary: Send Formatted Message
      description: Allows the client to send a formatted chat message from its account to an XMPP recipient. A formatted message contains the message in plain text, Markdown and HTML. The recipient, depending on capabilities, will select the representation it handles best to present the message.
      operationId: sendFormattedMessage
      tags:
        - XMPP
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendFormattedMessage"
          application/xml:
            schema:
              $ref: "#/components/schemas/SendFormattedMessage"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StanzaResult"
            application/xml:
              schema:
                $ref: "#/components/schemas/StanzaResult"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Xmpp/SendXmlMessage:
    post:
      summary: Send XML Message
      description: Allows the client to send a custom XML normal message from its account to an XMPP recipient.
      operationId: sendXmlMessage
      tags:
        - XMPP
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendXmlMessage"
          application/xml:
            schema:
              $ref: "#/components/schemas/SendXmlMessage"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StanzaResult"
            application/xml:
              schema:
                $ref: "#/components/schemas/StanzaResult"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Xmpp/SendPresenceSubscription:
    post:
      summary: Send Presence Subscription
      description: Allows the client to send a presence subscription stanza from its account to an XMPP recipient.
      operationId: sendPresenceSubscription
      tags:
        - XMPP
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendPresenceSubscriptionBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/SendPresenceSubscriptionBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PresenceSubscriptionResult"
            application/xml:
              schema:
                $ref: "#/components/schemas/PresenceSubscriptionResult"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Xmpp/SendPresenceUnsubscription:
    post:
      summary: Send Presence Unsubscription
      description: Allows the client to send a presence unsubscription stanza from its account to an XMPP recipient.
      operationId: sendPresenceUnsubscription
      tags:
        - XMPP
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendPresenceUnsubscriptionBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/SendPresenceUnsubscriptionBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StanzaResult"
            application/xml:
              schema:
                $ref: "#/components/schemas/StanzaResult"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Xmpp/SendSubscriptionAccepted:
    post:
      summary: Send Subscription Accepted
      description: Allows the client to accept a presence subscription made to its account.
      operationId: sendSubscriptionAccepted
      tags:
        - XMPP
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendSubscriptionAcceptedBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/SendSubscriptionAcceptedBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SendSubscriptionAcceptedResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/SendSubscriptionAcceptedResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Xmpp/SendSubscriptionDeclined:
    post:
      summary: Send Subscription Declined
      description: Allows the client to decline a presence subscription made to its account.
      operationId: sendSubscriptionDeclined
      tags:
        - XMPP
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SendSubscriptionDeclinedBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/SendSubscriptionDeclinedBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StanzaResult"
            application/xml:
              schema:
                $ref: "#/components/schemas/StanzaResult"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Xmpp/GetRoster:
    post:
      summary: Get Roster
      description: Allows the client to get the roster of its account.
      operationId: getRoster
      tags:
        - XMPP
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetRosterBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetRosterBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetRosterResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetRosterResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Xmpp/GetRosterItem:
    post:
      summary: Get Roster Item
      description: Allows the client to get a specific roster item of its account.
      operationId: getRosterItem
      tags:
        - XMPP
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetRosterItemBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetRosterItemBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RosterItem"
            application/xml:
              schema:
                $ref: "#/components/schemas/RosterItem"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Xmpp/SetRosterItem:
    post:
      summary: Set Roster Item
      description: Sets information about a specific roster item for the account.
      operationId: setRosterItem
      tags:
        - XMPP
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SetRosterItemBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/SetRosterItemBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RosterItem"
            application/xml:
              schema:
                $ref: "#/components/schemas/RosterItem"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Xmpp/RemoveRosterItem:
    post:
      summary: Remove Roster Item
      description: Removes a specific roster item from the account.
      operationId: removeRosterItem
      tags:
        - XMPP
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RemoveRosterItemBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/RemoveRosterItemBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RosterItem"
            application/xml:
              schema:
                $ref: "#/components/schemas/RosterItem"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Xmpp/PresenceProbe:
    post:
      summary: Presence Probe
      description: Gets the latest presence issued by a contact in your roster who has approved your presence subscription request.
      operationId: presenceProbe
      tags:
        - XMPP
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PresenceProbeBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/PresenceProbeBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProbeResult"
            application/xml:
              schema:
                $ref: "#/components/schemas/ProbeResult"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Xmpp/InformationQuery:
    post:
      summary: Information Query
      description: Sends an Information Query (iq) to an entity on the XMPP network, given its Full JID. For connected entities, you need to have an presence subscription to that entity, approved by the entity, to get the Full JID. You get the Full JID using the Presence Probe resource.
      operationId: informationQuery
      tags:
        - XMPP
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InformationQueryBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/InformationQueryBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/QueryResultJson"
            application/xml:
              schema:
                $ref: "#/components/schemas/QueryResultXml"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Xmpp/PopMessages:
    post:
      summary: Pop Messages
      operationId: popMessages
      tags:
        - XMPP
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PopMessagesBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/PopMessagesBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MessageResult"
            application/xml:
              schema:
                $ref: "#/components/schemas/MessageResult"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Storage/SavePrivateXml:
    post:
      summary: Save Private XML
      description: Saves private XML data to the server.
      operationId: savePrivateXml
      tags:
        - Storage
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SavePrivateXmlBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/SavePrivateXmlBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stored"
            application/xml:
              schema:
                $ref: "#/components/schemas/Stored"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Storage/LoadPrivateXml:
    post:
      summary: Load Private XML
      description: Loads private XML data from the server.
      operationId: loadPrivateXml
      tags:
        - Storage
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoadPrivateXmlBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/LoadPrivateXmlBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PrivateXml"
            application/xml:
              schema:
                $ref: "#/components/schemas/PrivateXml"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Storage/Content:
    post:
      summary: Upload new content using form data
      operationId: postContent
      tags:
        - Storage
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                Content:
                  type: string
                  format: binary
                ContentId:
                  type: string
                Visibility:
                  type: string
                  enum: [Public, Presence, Private]
      responses:
        "200":
          description: Content successfully uploaded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContentResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Storage/Content/{username}/{contentId}:
    put:
      summary: Upload new content with Content ID
      operationId: putContent
      tags:
        - Storage
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
          description: Username of the agent uploading the content
        - in: path
          name: contentId
          required: true
          schema:
            type: string
            pattern: '^.+\..+$'
          description: Content ID with file extension matching the Content-Type
        - in: header
          name: X-Visibility
          schema:
            type: string
            enum: [Public, Presence, Private]
          required: true
          description: Controls the visibility of the uploaded content
      requestBody:
        required: true
        content:
          "*/*":
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: Content successfully uploaded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContentResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/ContentResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Storage/Content/{path}:
    delete:
      summary: Deletes content from path
      operationId: deleteContent
      tags:
        - Storage
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: path
          required: true
          schema:
            type: string
          description: The path to the uploaded content
      responses:
        "200":
          description: OK
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
    get:
      summary: Get content from path
      operationId: getContent
      tags:
        - Storage
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: path
          required: true
          schema:
            type: string
          description: The path to the uploaded content
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContentResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/ContentResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Crypto/GetAlgorithms:
    post:
      summary: Get Algorithms
      description: Gets a list of algorithms supported by the server.
      operationId: getAlgorithms
      tags:
        - Crypto
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetAlgorithmsBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetAlgorithmsBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AlgorithmsResult"
            application/xml:
              schema:
                $ref: "#/components/schemas/AlgorithmsResult"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Crypto/CreateKey:
    post:
      summary: Create Key
      description: >
        Allows the client to create a cryptographic key on the server, and protect it with a password. The key will be stored encrypted on the server, protected with the key password. The creation of a key will require the user to provide the account password again.
      operationId: createKey
      tags:
        - Crypto
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateKeyBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/CreateKeyBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Stored"
            application/xml:
              schema:
                $ref: "#/components/schemas/Stored"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Crypto/GetPublicKey:
    post:
      summary: Get Public Key
      description: Gets the public key of a key pair.
      operationId: getPublicKey
      tags:
        - Crypto
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetPublicKeyBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetPublicKeyBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetPublicKeyResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetPublicKeyResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Legal/ValidatePNr:
    post:
      summary: Validate Personal Number
      description: Allows the client to validate a personal number before using it to apply for a Legal Identity.
      operationId: validatePNr
      tags:
        - Legal
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ValidatePNrBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/ValidatePNrBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidatePNrResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/ValidatePNrResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Legal/GetApplicationAttributes:
    post:
      summary: Get Application Attributes
      description: Allows the client to get the attributes of a legal identity application.
      operationId: getApplicationAttributes
      tags:
        - Legal
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetApplicationAttributesBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetApplicationAttributesBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetApplicationAttributesResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetApplicationAttributesResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Legal/GetIdentity:
    post:
      summary: Get Legal Identity
      description: Allows the client to get an Identity. If the Identity belongs to someone else, and the client is not authorized access to the Identity, an error will be returned.
      operationId: getIdentity
      tags:
        - Legal
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetIdentityBody"

          application/xml:
            schema:
              $ref: "#/components/schemas/GetIdentityBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdentityResponseJSON"
            application/xml:
              schema:
                $ref: "#/components/schemas/IdentityResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Legal/GetIdentities:
    post:
      summary: Get Legal Identities
      description: Allows the client to get a list of identities. If the identities belong to someone else, and the client is not authorized access to the identities, an error will be returned.
      operationId: getIdentities
      tags:
        - Legal
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetIdentitiesBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetIdentitiesBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdentitiesResponseJSON"
            application/xml:
              schema:
                $ref: "#/components/schemas/IdentitiesResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Legal/AddIdAttachment:
    post:
      summary: Add attachment to legal id application (NOT IMPLEMENTED)
      description: Allows the client to add an attachment to a Legal Identity application.
      operationId: addIdAttachment
      tags:
        - Legal
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddIdAttachmentBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/AddIdAttachmentBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IdentityResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/IdentityResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Legal/ReadyForApproval:
    post:
      summary: Ready for Approval
      description: |
        When an ID application is ready (all attachments have been signed and uploaded), 
        the client can call this resource to flag the application as ready for approval. 

        This will execute any automated onboarding procedures to analyze the application, and, if passing them, will take the identity to the approved state. 
        They can also take the application to the rejected state, in case they find the information invalid.
      operationId: readyForApproval
      tags:
        - Legal
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReadyForApprovalBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/ReadyForApprovalBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AckResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/AckResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Legal/GetServiceProviderForIdReview:
    post:
      summary: Get Service Provider for ID Review
      description: Allows the client to retrieve a list of available service providers that can be used to review a recent ID application.
      operationId: getServiceProviderForIdReview
      tags:
        - Legal
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetServiceProvidersForIdReviewBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetServiceProvidersForIdReviewBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvidersResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/ProvidersResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Legal/SelectReviewService:
    post:
      summary: Select Review Service
      description: Allows the client to select an internal peer review service, for reviewing a recent identity application.
      operationId: selectReviewService
      tags:
        - Legal
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SelectReviewServiceBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/SelectReviewServiceBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AckResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/AckResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Legal/AuthorizeAccessToId:
    post:
      summary: Authorize Access to ID
      description: Allows the client to (pre-)authorize access to (or remove authorization to access) one of its Legal Identities to a remote party. When (if) the remote party requests the ID, the broker will return it automatically, if already authorized. If not authorized, a petition to access the identity will be sent to the client for manual approval (or rejection).
      operationId: authorizeAccessToId
      tags:
        - Legal
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthorizeAccessToIdBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/AuthorizeAccessToIdBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AckResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/AckResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Legal/PetitionPeerReview:
    post:
      summary: Petition Peer Review
      description: Allows the client to petition a peer review service to review a recent identity application.
      operationId: petitionPeerReview
      tags:
        - Legal
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PetitionPeerReviewBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/PetitionPeerReviewBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AckResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/AckResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Legal/PetitionId:
    post:
      summary: Petition ID
      description: Allows the client to petition the owner of a Legal Identity, for information about the identity.
      operationId: petitionId
      tags:
        - Legal
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PetitionIdBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/PetitionIdBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AckResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/AckResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Legal/PetitionSignature:
    post:
      summary: Petition Signature
      description: Allows the client to petition the owner of a Legal Identity for a digital signature on some digital content.
      operationId: petitionSignature
      tags:
        - Legal
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PetitionSignatureBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/PetitionSignatureBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AckResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/AckResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Legal/CreateContract:
    post:
      summary: Create Contract
      description: Allows the client to create a new smart contract, based on an existing (and approved) contract template. The request must be signed using one of the keys created by the client.
      operationId: createContract
      tags:
        - Legal
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateContractBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/CreateContractBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContractResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/ContractResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Legal/GetContract:
    post:
      summary: Get Contract
      description: Allows the client to get a Smart Contract. If the Contract belongs to someone else, and the client is not authorized access to the Contract, an error will be returned.
      operationId: getContract
      tags:
        - Legal
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetContractBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetContractBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContractResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/ContractResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Legal/SignContract:
    post:
      summary: Sign Contract
      description: Allows the client to sign a Smart Contract. The request must be signed using one of the keys created by the client.
      operationId: signContract
      tags:
        - Legal
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignContractBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/SignContractBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContractResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/ContractResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Legal/SignData:
    post:
      summary: Sign Data
      description: Allows the client to sign binary data.
      operationId: signData
      tags:
        - Legal
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignDataBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/SignDataBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SignatureResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/SignatureResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Legal/GetCreatedContracts:
    post:
      summary: Get Created Contracts
      description: Allows the client to get a list of all Smart Contracts created by the client.
      operationId: getCreatedContracts
      tags:
        - Legal
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetCreatedContractsBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetCreatedContractsBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContractsResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/ContractsResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Legal/AuthorizeAccessToContract:
    post:
      summary: Authorize Access to Contract
      description: |
        Allows the client to (pre-)authorize access to (or remove authorization to access) one of its Smart Contracts (or one of the Smart Contracts for which the client is part) to a remote party. When (if) the remote party requests access to the the Smart Contract, the broker will return it automatically, if already authorized. If not authorized, a petition to access the Smart Contract will be sent to the clients of the part of the contract for manual approval.
      operationId: authorizeAccessToContract
      tags:
        - Legal
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthorizeAccessToContractBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/AuthorizeAccessToContractBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AckResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/AckResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Wallet/GetBalance:
    post:
      summary: Get Balance
      description: Allows the client to retrieve information about the current state of its wallet.
      operationId: getBalance
      tags:
        - Wallet
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetBalanceBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetBalanceBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetBalanceResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/GetBalanceResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Wallet/ProcessEDalerUri:
    post:
      summary: Process eDaler URI
      description: Allows the client to process an eDaler URI.
      operationId: processEDalerUri
      tags:
        - Wallet
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProcessEDalerUriBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/ProcessEDalerUriBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessResult"
            application/xml:
              schema:
                $ref: "#/components/schemas/ProcessResult"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Wallet/GetServiceProvidersForBuyingEDaler:
    post:
      summary: Get Service Providers for Buying eDaler
      description: Allows the client to retrieve a list of available service providers that can be used to buy eDaler.
      operationId: getServiceProvidersForBuyingEDaler
      tags:
        - Wallet
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetServiceProvidersForBuyingEDalerBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetServiceProvidersForBuyingEDalerBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvidersResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/ProvidersResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Wallet/GetServiceProvidersForSellingEDaler:
    post:
      summary: Get Service Providers for Selling eDaler
      description: Allows the client to retrieve a list of available service providers that can be used to sell eDaler.
      operationId: getServiceProvidersForSellingEDaler
      tags:
        - Wallet
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetServiceProvidersForSellingEDalerBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetServiceProvidersForSellingEDalerBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProvidersResponse"
            application/xml:
              schema:
                $ref: "#/components/schemas/ProvidersResponse"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Wallet/GetPaymentOptionsForBuyingEDaler:
    post:
      summary: Get Payment Options for Buying eDaler
      description: |
        Allows the client to initiate the process of getting payment options for buying eDaler.

      operationId: getPaymentOptionsForBuyingEDaler
      tags:
        - Wallet
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetPaymentOptionsForBuyingEDalerBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetPaymentOptionsForBuyingEDalerBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionInformation"
            application/xml:
              schema:
                $ref: "#/components/schemas/TransactionInformation"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Wallet/GetPaymentOptionsForSellingEDaler:
    post:
      summary: Get Payment Options for Selling eDaler
      description: |
        Allows the client to initiate the process of getting payment options for selling eDaler.

      operationId: getPaymentOptionsForSellingEDaler
      tags:
        - Wallet
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetPaymentOptionsForSellingEDalerBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetPaymentOptionsForSellingEDalerBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionInformation"
            application/xml:
              schema:
                $ref: "#/components/schemas/TransactionInformation"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Wallet/InitiateBuyEDaler:
    post:
      summary: Initiate Buy eDaler
      description: Allows the client to initiate the process of buying eDaler, using a service provider that does not use a smart contract as the basis for the transaction (i.e. a service provider that will require the client to open a third-party page to complete the transaction).
      operationId: initiateBuyEDaler
      tags:
        - Wallet
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InitiateBuyEDalerBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/InitiateBuyEDalerBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionInformation"
            application/xml:
              schema:
                $ref: "#/components/schemas/TransactionInformation"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Wallet/InitiateSellEDaler:
    post:
      summary: Initiate Sell eDaler
      description: Allows the client to initiate the process of selling eDaler, using a service provider that does not use a smart contract as the basis for the transaction (i.e. a service provider that will require the client to open a third-party page to complete the transaction).
      operationId: initiateSellEDaler
      tags:
        - Wallet
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InitiateSellEDalerBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/InitiateSellEDalerBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionInformation"
            application/xml:
              schema:
                $ref: "#/components/schemas/TransactionInformation"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Wallet/GetTransactionInformation:
    post:
      summary: Get Transaction Information
      description: |
        Allows the client to get updated transaction information from the server. It also allows the client to re-register the current Tab ID (from Events.js) and function to call, in case changes are registered with the server-side transaction object. Call this function to restart event notification if you navigate between pages.
      operationId: getTransactionInformation
      tags:
        - Wallet
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetTransactionInformationBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetTransactionInformationBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionInformation"
            application/xml:
              schema:
                $ref: "#/components/schemas/TransactionInformation"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Tokens/GetTokens:
    post:
      summary: Get Tokens
      description: Gets a list of tokens on the Neuron® owned by the account.
      operationId: getTokens
      tags:
        - Tokens
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetTokensBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetTokensBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokensResult"
            application/xml:
              schema:
                $ref: "#/components/schemas/TokensResult"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Tokens/GetContractTokens:
    post:
      summary: Get Contract Tokens
      description: Gets a list of tokens on the Neuron® owned by the account, for a specific contract.
      operationId: getContractTokens
      tags:
        - Tokens
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetContractTokensBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetContractTokensBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokensResult"
            application/xml:
              schema:
                $ref: "#/components/schemas/TokensResult"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Tokens/GetCreationAttributes:
    post:
      summary: Get Creation Attributes
      description: Gets the creation attributes for a specific token.
      operationId: getCreationAttributes
      tags:
        - Tokens
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetCreationAttributesBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetCreationAttributesBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CreationAttributes"
            application/xml:
              schema:
                $ref: "#/components/schemas/CreationAttributes"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Tokens/GetToken:
    post:
      summary: Get Token
      description: Gets information about a specific token.
      operationId: getToken
      tags:
        - Tokens
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetTokenBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetTokenBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResult"
            application/xml:
              schema:
                $ref: "#/components/schemas/TokenResult"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Tokens/GetDescription:
    post:
      summary: Get Description
      description: Creates a report relating to a state machine associated with a token.
      operationId: getDescription
      tags:
        - Tokens
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetDescriptionBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetDescriptionBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportResult"
            application/xml:
              schema:
                $ref: "#/components/schemas/ReportResult"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Tokens/AddTextNote:
    post:
      summary: Add Text Note
      description: Adds a text note to a token.
      operationId: addTextNote
      tags:
        - Tokens
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddTextNoteBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/AddTextNoteBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoteResult"
            application/xml:
              schema:
                $ref: "#/components/schemas/NoteResult"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Tokens/AddXmlNote:
    post:
      summary: Add XML Note
      description: Adds an XML note to a token.
      operationId: addXmlNote
      tags:
        - Tokens
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AddXmlNoteBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/AddXmlNoteBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoteResult"
            application/xml:
              schema:
                $ref: "#/components/schemas/NoteResult"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/Tokens/GetTokenEvents:
    post:
      summary: Get Token Events
      description: Gets a list of events for a specific token.
      operationId: getTokenEvents
      tags:
        - Tokens
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetTokenEventsBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetTokenEventsBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventsResult"
            application/xml:
              schema:
                $ref: "#/components/schemas/EventsResult"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/StateMachines/GetCurrentState:
    post:
      summary: Get Current State
      description: Gets the current state of a state machine, associated with a token.
      operationId: getCurrentState
      tags:
        - StateMachines
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GetCurrentStateBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/GetCurrentStateBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResult"
            application/xml:
              schema:
                $ref: "#/components/schemas/StateResult"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
  /Agent/StateMachines/CreateReport:
    post:
      summary: Create Report
      description: Creates a report relating to a state machine associated with a token.
      operationId: createReport
      tags:
        - StateMachines
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateReportBody"
          application/xml:
            schema:
              $ref: "#/components/schemas/CreateReportBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportResult"
            application/xml:
              schema:
                $ref: "#/components/schemas/ReportResult"
        "400":
          $ref: "#/components/responses/BadRequestResponse"
        "401":
          $ref: "#/components/responses/UnauthorizedResponse"
        "403":
          $ref: "#/components/responses/ForbiddenResponse"
        "404":
          $ref: "#/components/responses/NotFoundResponse"
        "405":
          $ref: "#/components/responses/MethodNotAllowedResponse"
        "406":
          $ref: "#/components/responses/NotAcceptableResponse"
        "429":
          $ref: "#/components/responses/TooManyRequestsResponse"
components:
  securitySchemes:
    WwwAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    url:
      type: string
      format: uri
    id:
      type: string
      format: uuid
    timestamp:
      type: string
      format: date-time
    eMail:
      type: string
      format: email
    password:
      type: string
      format: password

    DomainInfoResponse:
      type: object
      required:
        - useEncryption
      properties:
        domain:
          type: string
          description: The domain of the server
          xml:
            attribute: true
        useEncryption:
          type: boolean
          description: Indicates whether the server requires encryption
          xml:
            attribute: true
        humanReadableName:
          type: string
          description: Human-readable name of the server
          xml:
            attribute: true
        humanReadableNameDescription:
          type: string
          description: Human-readable description of the server
          xml:
            attribute: true
      xml:
        name: DomainInfo
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    CreateAccountBody:
      type: object
      required:
        - userName
        - eMail
        - password
        - apiKey
        - nonce
        - signature
        - seconds
      properties:
        userName:
          type: string
          description: The user's name.
          xml:
            attribute: true
        eMail:
          type: string
          format: email
          description: The user's email address.
          xml:
            attribute: true
        password:
          type: string
          format: password
          description: The user's password.
          xml:
            attribute: true
        apiKey:
          type: string
          description: The API key used for identification.
          xml:
            attribute: true
        nonce:
          type: string
          description: A unique nonce for this request.
          xml:
            attribute: true
        signature:
          type: string
          description: >
            The HMAC-SHA256 signature of the request. See the endpoint description for how to calculate the signature.

          xml:
            attribute: true
        seconds:
          type: integer
          description: The number of seconds until the request expires.
          minimum: 0
          maximum: 3600
          xml:
            attribute: true
      xml:
        name: CreateAccount
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    CreateAccountResponse:
      type: object
      required:
        - created
        - enabled
        - canRelay
        - jwt
        - expires
      properties:
        created:
          type: integer
          format: timestamp
          description: The server timestamp when the account was created.
          xml:
            attribute: true
        enabled:
          type: boolean
          description: Whether the account is enabled.
          xml:
            attribute: true
        canRelay:
          type: boolean
          description: Whether the account can relay e-mails.
          xml:
            attribute: true
        jwt:
          type: string
          description: The JSON Web Token for authentication.
          xml:
            attribute: true
        expires:
          type: string
          format: date-time
          description: The timestamp when the jwt token expires.
          xml:
            attribute: true
      xml:
        name: AccountCreated
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    GetSessionTokenBody:
      type: object
      xml:
        name: GetSessionToken
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    GetSessionTokenResponse:
      type: object
      properties:
        AccountCreated:
          $ref: "#/components/schemas/CreateAccountResponse"
        seconds:
          type: integer
          description: The number of seconds until the JWT expires.
          minimum: 0
          maximum: 3600
          xml:
            attribute: true
      xml:
        name: SessionToken
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    VerifyEMailBody:
      type: object
      required:
        - eMail
        - code
      properties:
        eMail:
          type: string
          format: email
          description: The e-mail address to verify.
          xml:
            attribute: true
        code:
          type: string
          description: The verification code.
          xml:
            attribute: true
      xml:
        name: VerifyEMail
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    VerifyEMailResponse:
      type: object
      required:
        - eMail
        - userName
      properties:
        eMail:
          type: string
          format: email
          description: The e-mail address that was verified.
          xml:
            attribute: true
        userName:
          type: string
          description: The user name of the account.
          xml:
            attribute: true
      xml:
        name: EMailVerified
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    LoginBody:
      type: object
      required:
        - userName
        - nonce
        - signature
        - seconds
      properties:
        userName:
          type: string
          description: The user name of the account.
          nullable: false
          xml:
            attribute: true
        nonce:
          type: string
          description: A unique random string, at least 32 characters long, with sufficient entropy to not be reused again.
          xml:
            attribute: true
        signature:
          type: string
          description: >
            The HMAC-SHA256 signature of the request. See the endpoint description for how to calculate the signature.

          xml:
            attribute: true
        seconds:
          type: integer
          description: The number of seconds until the request expires.
          minimum: 0
          maximum: 3600
          xml:
            attribute: true
      xml:
        name: Login
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    LoginResponse:
      type: object
      required:
        - jwt
        - expires
      properties:
        jwt:
          type: string
          description: The JSON Web Token for authentication.
          xml:
            attribute: true
        expires:
          type: integer
          description: The timestamp when the jwt token expires.
          xml:
            attribute: true
      xml:
        name: LoggedIn
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    WwwLoginBody:
      type: object
      required:
        - seconds
      properties:
        seconds:
          type: integer
          description: The number of seconds until the request expires.
          minimum: 0
          maximum: 3600
          xml:
            attribute: true
      xml:
        name: WwwLogin
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    RefreshBody:
      type: object
      required:
        - seconds
      properties:
        seconds:
          type: integer
          description: The number of seconds until the request expires.
          minimum: 0
          maximum: 3600
          xml:
            attribute: true
      xml:
        name: Refresh
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    LogoutBody:
      type: object
      xml:
        name: Logout
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    AckResponse:
      type: object
      xml:
        name: AckResponse
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    RecoverBody:
      type: object
      properties:
        userName:
          type: string
          description: The user name of the account.
          xml:
            attribute: true
        eMail:
          type: string
          format: email
          description: The e-mail address of the account.
          xml:
            attribute: true
        country:
          type: string
          description: The country of the account.
          xml:
            attribute: true
        phoneNr:
          type: string
          description: The phone number of the account.
          xml:
            attribute: true
      xml:
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    RecoverResponse:
      type: object
      xml:
        name: RecoverResponse
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    SendTextMessageBody:
      type: object
      required:
        - to
        - message
      properties:
        to:
          type: string
          description: A Bare or Full JID (XMPP network address).
          xml:
            attribute: true
        message:
          type: string
          description: The plain text message to send.
          xml:
            attribute: true
        subject:
          type: string
          description: Optional subject of message.
          xml:
            attribute: true
        language:
          type: string
          description: Optional ISO 639-1 language code.
          xml:
            attribute: true
        id:
          type: string
          description: Optional Message ID.
          xml:
            attribute: true
      xml:
        name: SendTextMessage
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    SendFormattedMessage:
      type: object
      required:
        - to
        - message
      properties:
        to:
          type: string
          description: A Bare or Full JID (XMPP network address).
          xml:
            attribute: true
        message:
          type: string
          description: The plain text message to send.
          xml:
            attribute: true
        subject:
          type: string
          description: Optional subject of message.
          xml:
            attribute: true
        language:
          type: string
          description: Optional ISO 639-1 language code.
          xml:
            attribute: true
        id:
          type: string
          description: Optional Message ID.
          xml:
            attribute: true
      xml:
        name: SendFormattedMessage
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    StanzaResult:
      type: object
      required:
        - sent
        - id
      properties:
        sent:
          type: boolean
          description: Whether the XMPP stanza was sent or not.
          xml:
            attribute: true
        id:
          type: string
          description: ID of stanza sent. Can be used to update message. If no ID was provided in the call, a message ID will be generated.

          xml:
            attribute: true
      xml:
        name: StanzaResult
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    SendPresenceSubscriptionBody:
      type: object
      required:
        - to
      properties:
        to:
          type: string
          description: A Bare or Full JID (XMPP network address).
          xml:
            attribute: true
        customXml:
          type: string
          description: Optional Custom XML that can be added to the presence subscription request.
          example: ""
          xml:
            name: "[Custom XML Goes Here]"
        language:
          type: string
          description: Optional ISO 639-1 language code.
          xml:
            attribute: true
        id:
          type: string
          description: Optional Message ID.
          xml:
            attribute: true
      xml:
        name: SendPresenceSubscription
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    PresenceSubscriptionResult:
      type: object
      required:
        - sent
        - id
      properties:
        sent:
          type: boolean
          description: Whether the XMPP stanza was sent or not.
          xml:
            attribute: true
        id:
          type: string
          description: ID of stanza sent. Can be used to update message. If no ID was provided in the call, a message ID will be generated.
          xml:
            attribute: true
        RosterItem:
          $ref: "#/components/schemas/RosterItem"
      xml:
        name: PresenceSubscriptionResult
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    Groups:
      type: array
      description: The groups that the roster item belongs to.
      items:
        type: string
        nullable: true
        xml:
          name: Item
      xml:
        name: Groups
        wrapped: true
    RosterItem:
      type: object
      required:
        - bareJid
        - pendingSubscription
        - status
        - name
        - Groups
      properties:
        bareJid:
          type: string
          description: The bare Jabber ID of the roster item.
          xml:
            attribute: true
        pendingSubscription:
          type: boolean
          description: Indicates if there is a pending subscription.
          xml:
            attribute: true
        status:
          type: string
          description: The status of the roster item.
          xml:
            attribute: true
        name:
          type: string
          description: The name of the roster item.
          xml:
            attribute: true
        Groups:
          $ref: "#/components/schemas/Groups"
      xml:
        name: RosterItem
    SendXmlMessage:
      type: object
      required:
        - to
        - Xml
      properties:
        to:
          type: string
          description: A Bare or Full JID (XMPP network address).
          xml:
            attribute: true
        subject:
          type: string
          description: Optional subject of message.
          xml:
            attribute: true
        language:
          type: string
          description: Optional ISO 639-1 language code.
          xml:
            attribute: true
        id:
          type: string
          description: Optional Message ID.
          xml:
            attribute: true
        Xml:
          type: string
          description: The XML to send.
          xml:
            name: Xml
      xml:
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    SendPresenceUnsubscriptionBody:
      type: object
      required:
        - to
      properties:
        to:
          type: string
          description: A Bare or Full JID (XMPP network address).
          xml:
            attribute: true
        id:
          type: string
          description: Optional Message ID.
          xml:
            attribute: true
      xml:
        name: SendPresenceUnsubscription
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    SendSubscriptionAcceptedBody:
      type: object
      required:
        - to
      properties:
        to:
          type: string
          description: A Bare or Full JID (XMPP network address).
          xml:
            attribute: true
        id:
          type: string
          description: Optional Message ID.
          xml:
            attribute: true
      xml:
        name: SendSubscriptionAccepted
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    SendSubscriptionAcceptedResponse:
      type: object
      required:
        - sent
        - id
        - RosterItem
      properties:
        sent:
          type: boolean
          description: Whether the XMPP stanza was sent or not.
          xml:
            attribute: true
        id:
          type: string
          description: ID of stanza sent. Can be used to update message. If no ID was provided in the call, a message ID will be generated.
          xml:
            attribute: true
        RosterItem:
          $ref: "#/components/schemas/RosterItem"
      xml:
        name: SubscriptionAcceptedResult
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    SendSubscriptionDeclinedBody:
      type: object
      required:
        - to
      properties:
        to:
          type: string
          description: A Bare or Full JID (XMPP network address).
          xml:
            attribute: true
        id:
          type: string
          description: Optional Message ID.
          xml:
            attribute: true
      xml:
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    GetRosterBody:
      type: object
      properties:
        offset:
          type: integer
          description: Offset into the roster where response begins.
          xml:
            attribute: true
        maxCount:
          type: integer
          description: Maximum number of roster items to return.
          xml:
            attribute: true
      xml:
        name: GetRoster
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    GetRosterResponse:
      type: object
      properties:
        RosterItems:
          type: array
          items:
            allOf:
              - $ref: "#/components/schemas/RosterItem"
            xml:
              name: Item
          xml:
            name: RosterItems
            wrapped: true
      xml:
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
        name: Roster
    GetRosterItemBody:
      type: object
      required:
        - bareJid
      properties:
        bareJid:
          type: string
          description: Bare JID of roster item.
          xml:
            attribute: true
      xml:
        name: GetRosterItem
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    SetRosterItemBody:
      type: object
      required:
        - bareJid
        - name
        - Groups
      properties:
        bareJid:
          type: string
          description: Bare JID of roster item.
          xml:
            attribute: true
        name:
          type: string
          description: Name of roster item.
          xml:
            attribute: true
        Groups:
          $ref: "#/components/schemas/Groups"
      xml:
        name: SetRosterItem
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    RemoveRosterItemBody:
      type: object
      required:
        - bareJid
      properties:
        bareJid:
          type: string
          description: Bare JID of roster item.
          xml:
            attribute: true
      xml:
        name: RemoveRosterItem
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    PresenceProbeBody:
      type: object
      required:
        - to
      properties:
        to:
          type: string
          description: A Bare or Full JID (XMPP network address).
          xml:
            attribute: true
      xml:
        name: PresenceProbe
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    ProbeResult:
      type: object
      required:
        - jid
        - type
        - recieved
        - Stanza
      properties:
        jid:
          type: string
          description: Bare JID of contact to whom the presence probe is directed.
          xml:
            attribute: true
        type:
          type: string
          description: Type of presence sent. Can be the empty string (meaning available) or unavailable.
          xml:
            attribute: true
        recieved:
          type: string
          format: date-time
          description: When presence was received by the server of the contact.
          xml:
            attribute: true
        Stanza:
          type: string
          description: The XML stanza that was sent.
          xml:
            name: Stanza
      xml:
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    InformationQueryBody:
      type: object
      required:
        - to
        - type
        - xml
      properties:
        to:
          type: string
          description: A Bare or Full JID (XMPP network address).
          xml:
            attribute: true
        type:
          type: string
          description: Type of information query.
          xml:
            attribute: true
        xml:
          type: string
          description: The XML stanza that was sent.
          example: ""
          xml:
            wrapped: false
            name: "[Custom Xml]"
      xml:
        name: InformationQuery
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    QueryResultJson:
      type: object
      required:
        - ok
      properties:
        ok:
          type: boolean
          description: Whether the query was successful or not.
        errorCode:
          type: integer
          description: If the query was not successful, this is the error code.
        errorText:
          type: string
          description: If the query was not successful, this is the error text.
        errorType:
          type: string
          description: If the query was not successful, this is the error type.
        ErrorElement:
          type: string
          description: If the query was not successful, this is the error element.
        Stanza:
          type: string
          description: The XML stanza that was sent.
    QueryResultXml:
      type: object
      required:
        - ok
      properties:
        ok:
          type: boolean
          description: Whether the query was successful or not.
          xml:
            attribute: true
        errorCode:
          type: integer
          description: If the query was not successful, this is the error code.
          xml:
            attribute: true
        errorText:
          type: string
          description: If the query was not successful, this is the error text.
          xml:
            attribute: true
        errorType:
          type: string
          description: If the query was not successful, this is the error type.
          xml:
            attribute: true
        content:
          type: string
          description: Any XML content returned in the query result.
          example: ""
          xml:
            wrapped: false
            name: "[Custom Xml]"
      xml:
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    PopMessagesBody:
      type: object
      required:
        - maxCount
      properties:
        maxCount:
          type: integer
          description: Maximum number of messages to return.
          xml:
            attribute: true
      xml:
        name: PopMessages
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    Message:
      type: object
      required:
        - from
        - to
        - type
        - timestamp
        - content
      properties:
        id:
          type: string
          description: The ID of the message.
          xml:
            attribute: true
        from:
          type: string
          description: The Bare JID of the sender.
          xml:
            attribute: true
        to:
          type: string
          description: The Bare JID of the recipient.
          xml:
            attribute: true
        type:
          type: string
          description: The type of message.
          xml:
            attribute: true
        timestamp:
          type: string
          format: date-time
          description: The timestamp of the message.
          xml:
            attribute: true
        content:
          type: string
          description: The content of the message.
          example: ""
          xml:
            wrapped: false
            name: "[Custom Xml]"
      xml:
        wrapped: false
    MessageResult:
      type: object
      required:
        - messages
      properties:
        messages:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/Message"
          xml:
            name: Message
    SavePrivateXmlBody:
      type: object
      required:
        - xml
      properties:
        xml:
          type: string
          description: The XML to save.
          example: ""
          xml:
            name: "[Custom Xml]"
      xml:
        name: SavePrivateXml
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    Stored:
      type: object
      required:
        - created
        - updated
      properties:
        created:
          type: string
          format: date-time
          description: When the information record was first created.
          xml:
            attribute: true
        updated:
          type: string
          format: date-time
          description: When the information record was last updated.
          xml:
            attribute: true
    LoadPrivateXmlBody:
      type: object
      required:
        - localName
        - namespace
      properties:
        localName:
          type: string
          description: The local name of the XML element.
          xml:
            attribute: true
        namespace:
          type: string
          description: The namespace of the XML element.
          xml:
            attribute: true
      xml:
        name: LoadPrivateXml
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    PrivateXml:
      type: object
      required:
        - created
        - updated
        - xml
      properties:
        created:
          type: string
          format: date-time
          description: When the information record was first created.
          xml:
            attribute: true
        updated:
          type: string
          format: date-time
          description: When the information record was last updated.
          xml:
            attribute: true
        xml:
          type: string
          description: The XML to save.
          example: ""
          xml:
            wrapped: false
            name: "[Custom Xml]"
      xml:
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    Visibility:
      type: string
      enum:
        - Public
        - Presence
        - Private
      xml:
        attribute: true
    ContentResponse:
      type: object
      required:
        - uploaded
        - visibility
        - etag
        - url
      properties:
        uploaded:
          type: string
          format: date-time
          xml:
            attribute: true
        visibility:
          $ref: "#/components/schemas/Visibility"
        etag:
          type: string
          xml:
            attribute: true
        url:
          type: string
          xml:
            attribute: true
      xml:
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    Algorithm:
      type: object
      required:
        - localName
        - namespace
        - secuirtyStrength
        - safe
        - slow
        - score
      properties:
        localName:
          type: string
          description: The local name of the algorithm.
          xml:
            attribute: true
        namespace:
          type: string
          description: The namespace of the algorithm.
          xml:
            attribute: true
        secuirtyStrength:
          type: integer
          description: The security strength of the algorithm.
          xml:
            attribute: true
        safe:
          type: boolean
          description: Whether the algorithm is considered safe or not.
          xml:
            attribute: true
        slow:
          type: boolean
          description: Whether the algorithm is considered slow or not.
          xml:
            attribute: true
        score:
          type: integer
          description: The score of the algorithm.
          xml:
            attribute: true
      xml:
        name: Algorithm
        wrapped: true
    Algorithms:
      type: array
      nullable: true
      items:
        $ref: "#/components/schemas/Algorithm"
      xml:
        name: Algorithms
        wrapped: true
    GetAlgorithmsBody:
      type: object
      xml:
        name: GetAlgorithms
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    AlgorithmsResult:
      type: object
      required:
        - algorithms
      properties:
        algorithms:
          $ref: "#/components/schemas/Algorithms"
      xml:
        name: AlgorithmsResult
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    CreateKeyBody:
      type: object
      required:
        - localName
        - namespace
        - id
        - nonce
        - keySignature
        - requestSignature
      properties:
        localName:
          type: string
          description: The local name of the key.
          xml:
            attribute: true
        namespace:
          type: string
          description: The namespace of the key.
          xml:
            attribute: true
        id:
          type: string
          description: The ID of the key.
          xml:
            attribute: true
        nonce:
          type: string
          description: A unique nonce for this request.
          xml:
            attribute: true
        keySignature:
          type: string
          description: >
            The HMAC-SHA256 signature of the request. See the endpoint description for how to calculate the signature.
          xml:
            attribute: true
        requestSignature:
          type: string
          description: >
            The HMAC-SHA256 signature of the request. See the endpoint description for how to calculate the signature.
          xml:
            attribute: true
      xml:
        name: CreateKey
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    GetPublicKeyBody:
      type: object
      properties:
        keyId:
          type: string
          description: Optional Key ID. If not provided, the server public key is returned. If provided, the public key of the corresponding cryptographic key of the client is returned.
          xml:
            attribute: true
      xml:
        name: GetPublicKey
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    GetPublicKeyResponse:
      type: object
      required:
        - key
      properties:
        key:
          type: string
          description: Base64-encoded public key of the server.
          xml:
            attribute: true
        Algorithm:
          $ref: "#/components/schemas/Algorithm"
      xml:
        name: PublicKey
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    ValidatePNrBody:
      type: object
      required:
        - countryCode
        - pnr
      properties:
        countryCode:
          type: string
          description: ISO 3166-1 country code.
          xml:
            attribute: true
        pnr:
          type: string
          description: Personal number entry to validate.
          xml:
            attribute: true
      xml:
        name: ValidatePNr
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    ValidatePNrResponse:
      type: object
      required:
        - countrySupported
      properties:
        countrySupported:
          type: boolean
          description: If country is supported and recognized by the personal number validator on the broker.
          xml:
            attribute: true
        isValid:
          type: boolean
          description: If the personal number is valid.
          xml:
            attribute: true
        normalized:
          type: string
          description: The normalized personal number.
          xml:
            attribute: true
      xml:
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    GetApplicationAttributesBody:
      type: object
      xml:
        name: GetApplicationAttributes
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    GetApplicationAttributesResponse:
      type: object
      required:
        - peerReview
      properties:
        peerReview:
          type: boolean
          description: If peer review is required.
          xml:
            attribute: true
        nrReviewers:
          type: integer
          description: Number of successfuls peer reviews required for a process to conclude successfully.
          nullable: true
          xml:
            attribute: true
        nrPhotos:
          type: integer
          description: Number of photos required in an application, for a peer-review process.
          nullable: true
          xml:
            attribute: true
        iso3166:
          type: boolean
          description: If ISO 3166 country codes are required to be used.
          nullable: true
          xml:
            attribute: true
        Required:
          type: array
          items:
            type: string
            xml:
              name: Item
          xml:
            name: Required
            wrapped: true
      xml:
        name: ApplicationAttributes
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    GetIdentityBody:
      type: object
      required:
        - legalId
      properties:
        legalId:
          type: string
          description: Identity of the Legal Identity to get.
          xml:
            attribute: true
      xml:
        name: GetIdentity
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    IdentityResponse:
      type: object
      required:
        - Identity
      properties:
        Identity:
          type: object
          additionalProperties: true
          xml:
            name: Identity
            namespace: "urn:ieee:iot:leg:id:1.0"
      xml:
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    GetIdentitiesBody:
      type: object
      properties:
        offset:
          type: integer
          description: Offset into the identities where response begins.
          xml:
            attribute: true
        maxCount:
          type: integer
          description: Maximum number of identities to return.
          xml:
            attribute: true
      xml:
        name: GetIdentities
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    IdentitiesResponse:
      type: object
      required:
        - Identity
      properties:
        Identities:
          type: array
          nullable: true
          items:
            type: object
            additionalProperties: true
            xml:
              name: Identity
              namespace: "urn:ieee:iot:leg:id:1.0"
          xml:
            name: Identities
            wrapped: true
      xml:
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"

    IdentityResponseJSON:
      type: object
      required:
        - Identity
      properties:
        Identity:
          $ref: "#/components/schemas/IdentityJson"

    IdentitiesResponseJSON:
      type: object
      required:
        - Identities
      properties:
        Identities:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/IdentityJson"

    IdentityJson:
      type: object
      required:
        - __name
        - __ns
        - id
        - xmlns
        - clientPublicKey
        - property
        - clientSignature
        - status
        - serverSignature
      properties:
        __name:
          type: string
          description: The local name of the identity.
        __ns:
          type: string
          description: The namespace of the identity.
        id:
          type: string
          description: The ID of the identity.
        xmlns:
          type: string
          description: The XML namespace of the identity.
        clientPublicKey:
          type: object
          description: The public key object of the client.
          required:
            - __name
            - __ns
          additionalProperties: true
          properties:
            __name:
              type: string
              description: The local name of the public key.
            __ns:
              type: string
              description: The namespace of the public key.
        property:
          type: array
          nullable: true
          items:
            type: object
            required:
              - __name
              - __ns
            properties:
              __name:
                type: string
                description: The local name of the property.
              __ns:
                type: string
                description: The namespace of the property.
              xmlns:
                type: string
                description: The XML namespace of the property.
            additionalProperties: true
        clientSignature:
          type: object
          description: The signature object of the client.
          required:
            - __name
            - __ns
            - value
          properties:
            __name:
              type: string
              description: The local name of the signature.
            __ns:
              type: string
              description: The namespace of the signature.
            value:
              type: string
              description: The signature.
        status:
          type: object
          description: The status object of the identity.
          required:
            - __name
            - __ns
            - created
            - from
            - provider
            - state
            - to
            - updated
          properties:
            __name:
              type: string
              description: The local name of the status.
            __ns:
              type: string
              description: The namespace of the status.
            created:
              type: string
              format: date-time
              description: When the status was created.
            from:
              type: string
              format: date-time
            provider:
              type: string
              description: The Bare JID of the provider.
            state:
              type: string
              description: The state of the status.
            to:
              type: string
              format: date-time
            updated:
              type: string
              format: date-time
              description: When the status was last updated.
        serverSignature:
          type: object
          description: The signature object of the server.
          required:
            - __name
            - __ns
            - value
          properties:
            __name:
              type: string
              description: The local name of the signature.
            __ns:
              type: string
              description: The namespace of the signature.
            value:
              type: string
              description: The signature.

    AddIdAttachmentBody:
      type: object
      required:
        - keyId
        - legalId
        - nonce
        - keySignature
        - requestSignature
        - attachmentBase64
        - attachmentFileName
        - attachmentContentType
      properties:
        keyId:
          type: string
          description: Identity of key to use for signing the Identity application.
          xml:
            attribute: true
        legalId:
          type: string
          description: Identity of the Legal Identity Application.
          xml:
            attribute: true
        nonce:
          type: string
          description: A unique random string, at least 32 characters long, with sufficient entropy to not be reused again. If reused, an error will be returned.
          xml:
            attribute: true
        keySignature:
          type: string
          description: >
            Cryptographic signature of the key ID, using the key password.
          xml:
            attribute: true
        requestSignature:
          type: string
          description: >
            Cryptographic signature of the request, using the account password.
          xml:
            attribute: true
        attachmentBase64:
          type: string
          description: Base-64-encoding of attachment to add to the Identity application.
          xml:
            attribute: true
        attachmentFileName:
          type: string
          description: File name of attachment.
          xml:
            attribute: true
        attachmentContentType:
          type: string
          description: Content type of attachment.
          xml:
            attribute: true
      xml:
        name: AddIdAttachment
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    ReadyForApprovalBody:
      type: object
      required:
        - legalId
      properties:
        legalId:
          type: string
          description: Identity of the Legal Identity Application.
          xml:
            attribute: true
      xml:
        name: ReadyForApproval
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    GetServiceProvidersForIdReviewBody:
      type: object
      required:
        - legalId
      properties:
        legalId:
          type: string
          description: Identity of the Legal Identity Application.
          xml:
            attribute: true
      xml:
        name: GetServiceProvidersForIdReview
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    Provider:
      type: object
      required:
        - id
        - type
        - name
        - reviewerId
        - external
      properties:
        id:
          type: string
          description: Identity of the provider.
          xml:
            attribute: true
        type:
          type: string
          description: Type of provider.
          xml:
            attribute: true
        name:
          type: string
          description: Name of provider.
          xml:
            attribute: true
        reviewerId:
          type: string
          description: Identity of reviewer.
          xml:
            attribute: true
        external:
          type: boolean
          description: If provider is external.
          xml:
            attribute: true
        iconUrl:
          type: string
          description: URL of icon.
          nullable: true
          xml:
            attribute: true
        iconWidth:
          type: integer
          description: Width of icon.
          nullable: true
          xml:
            attribute: true
        iconHeight:
          type: integer
          description: Height of icon.
          nullable: true
          xml:
            attribute: true
      xml:
        name: Provider
        wrapped: true
    ProvidersResponse:
      type: object
      required:
        - Providers
      properties:
        Providers:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/Provider"
          xml:
            name: Providers
            wrapped: true
      xml:
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    SelectReviewServiceBody:
      type: object
      required:
        - serviceId
        - serviceProvider
      properties:
        serviceId:
          type: string
          description: ID of internal peer review service.
          xml:
            attribute: true
        serviceProvider:
          type: string
          description: Type (class name) of service provider.
          xml:
            attribute: true
      xml:
        name: SelectReviewService
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    AuthorizeAccessToIdBody:
      type: object
      required:
        - legalId
        - remoteId
        - authorized
      properties:
        legalId:
          type: string
          description: Identifier of the corresponding Legal Identity of the client.
          xml:
            attribute: true
        remoteId:
          type: string
          description: Identifier of the Legal Identity of the corresponding remote entity.
          xml:
            attribute: true
        authorized:
          type: boolean
          description: If the remote entity is authorized access to the corresponding identity or not.
          xml:
            attribute: true
      xml:
        name: AuthorizeAccessToId
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    PetitionPeerReviewBody:
      type: object
      required:
        - keyId
        - legalId
        - remoteId
        - petitionId
        - purpose
        - keySignature
        - requestSignature
      properties:
        keyId:
          type: string
          description: Identity of key to use for signing the petition. It must correspond to the key used when signing the Legal Identity application that will be used to sign the petition.
          xml:
            attribute: true
        legalId:
          type: string
          description: Identifier of the Legal Identity that will be used to sign the petition, and that will be reviewed by the peer.
          xml:
            attribute: true
        remoteId:
          type: string
          description: Identifier of the remote legal identity the client requests review the identity application.
          xml:
            attribute: true
        petitionId:
          type: string
          description: An identifier of the request, the client can use to correlate asynchronous responses with the corresponding petition request.
          xml:
            attribute: true
        purpose:
          type: string
          description: A human readable text that will be presented to the remote user, describing the purpose of the petition.
          xml:
            attribute: true
        keySignature:
          type: string
          description: >
            Cryptographic signature of the key ID, using the key password.
          xml:
            attribute: true
        requestSignature:
          type: string
          description: >
            Cryptographic signature of the request, using the account password.
          xml:
            attribute: true
      xml:
        name: PetitionPeerReview
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    PetitionIdBody:
      type: object
      required:
        - keyId
        - legalId
        - remoteId
        - petitionId
        - purpose
        - keySignature
        - requestSignature
      properties:
        keyId:
          type: string
          description: Identity of key to use for signing the petition. It must correspond to the key used when signing the Legal Identity application that will be used to sign the petition.
          xml:
            attribute: true
        legalId:
          type: string
          description: Identifier of the Legal Identity that will be used to sign the petition.
          xml:
            attribute: true
        remoteId:
          type: string
          description: Identifier of the remote legal identity the client requests access to.
          xml:
            attribute: true
        petitionId:
          type: string
          description: An identifier of the request, the client can use to correlate asynchronous responses with the corresponding petition request.
          xml:
            attribute: true
        purpose:
          type: string
          description: A human readable text that will be presented to the remote user, describing the purpose of the petition.
          xml:
            attribute: true
        keySignature:
          type: string
          description: >
            Cryptographic signature of the key ID, using the key password.
          xml:
            attribute: true
        requestSignature:
          type: string
          description: >
            Cryptographic signature of the request, using the account password.
          xml:
            attribute: true
      xml:
        name: PetitionId
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    PetitionSignatureBody:
      type: object
      required:
        - keyId
        - legalId
        - remoteId
        - contentBase64
        - petitionId
        - purpose
        - keySignature
        - requestSignature
      properties:
        keyId:
          type: string
          description: Identity of key to use for signing the petition. It must correspond to the key used when signing the Legal Identity application that will be used to sign the petition.
          xml:
            attribute: true
        legalId:
          type: string
          description: Identifier of the Legal Identity that will be used to sign the petition.
          xml:
            attribute: true
        remoteId:
          type: string
          description: Identifier of the remote legal identity the client requests access to.
          xml:
            attribute: true
        contentBase64:
          type: string
          description: Base64-encoded binary content requested to be signed by the remote legal identity.
          xml:
            attribute: true
        petitionId:
          type: string
          description: An identifier of the request, the client can use to correlate asynchronous responses with the corresponding petition request.
          xml:
            attribute: true
        purpose:
          type: string
          description: A human readable text that will be presented to the remote user, describing the purpose of the petition.
          xml:
            attribute: true
        keySignature:
          type: string
          description: >
            Cryptographic signature of the key ID, using the key password.
          xml:
            attribute: true
        requestSignature:
          type: string
          description: >
            Cryptographic signature of the request, using the account password.
          xml:
            attribute: true
      xml:
        name: PetitionSignature
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    Part:
      type: object
      required:
        - role
        - legalId
      properties:
        role:
          type: string
          description: Role of a predefined part to the contract.
          xml:
            attribute: true
        legalId:
          type: string
          description: Identity of part.
          xml:
            attribute: true
      xml:
        name: Part
    Parts:
      type: array
      nullable: true
      items:
        $ref: "#/components/schemas/Part"
      xml:
        name: Parts
        wrapped: true
    Parameter:
      type: object
      required:
        - name
        - value
      properties:
        name:
          type: string
          description: Name of parameter.
          xml:
            attribute: true
        value:
          type: string
          description: Value of parameter.
          xml:
            attribute: true
      xml:
        name: Parameter
    Parameters:
      type: array
      nullable: true
      items:
        $ref: "#/components/schemas/Parameter"
      xml:
        name: Parameters
        wrapped: true
    CreateContractBody:
      type: object
      required:
        - templateId
        - visibility
      properties:
        templateId:
          type: string
          description: Identity of template to use.
          xml:
            attribute: true
        visibility:
          type: string
          description: Visibility of contract.
          enum:
            - Public
            - PublicSearchable
            - CreatorAndParts
            - DomainAndParts
          xml:
            attribute: true
        Parts:
          $ref: "#/components/schemas/Parts"
        Parameters:
          $ref: "#/components/schemas/Parameters"
      xml:
        name: CreateContract
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    ContractResponse:
      type: object
      required:
        - Contract
      properties:
        Contract:
          type: object
          description: The contract object
          additionalProperties: true
          xml:
            attribute: false
      xml:
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    GetContractBody:
      type: object
      required:
        - contractId
      properties:
        contractId:
          type: string
          description: Identity of contract to get.
          xml:
            attribute: true
      xml:
        name: GetContract
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    SignContractBody:
      type: object
      required:
        - keyId
        - legalId
        - contractId
        - role
        - nonce
        - keySignature
        - requestSignature
      properties:
        keyId:
          type: string
          description: Identity of key to use for signing the contract.
          xml:
            attribute: true
        legalId:
          type: string
          description: Identity of the Legal Identity that will be used to sign the contract.
          xml:
            attribute: true
        contractId:
          type: string
          description: Identity of contract to sign.
          xml:
            attribute: true
        role:
          type: string
          description: Role of a predefined part to the contract.
          xml:
            attribute: true
        nonce:
          type: string
          description: A unique random string, at least 32 characters long, with sufficient entropy to not be reused again. If reused, an error will be returned.
          xml:
            attribute: true
        keySignature:
          type: string
          description: >
            Cryptographic signature of the key ID, using the key password.
          xml:
            attribute: true
        requestSignature:
          type: string
          description: >
            Cryptographic signature of the request, using the account password.
          xml:
            attribute: true
      xml:
        name: SignContract
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    SignDataBody:
      type: object
      required:
        - keyId
        - legalId
        - dataBase64
        - keySignature
        - requestSignature
      properties:
        keyId:
          type: string
          description: Identity of key to use for signing the data.
          xml:
            attribute: true
        legalId:
          type: string
          description: Identity of the Legal Identity that will be used to sign the data.
          xml:
            attribute: true
        dataBase64:
          type: string
          description: Base64-encoded binary data to sign.
          xml:
            attribute: true
        keySignature:
          type: string
          description: >
            Cryptographic signature of the key ID, using the key password.
          xml:
            attribute: true
        requestSignature:
          type: string
          description: >
            Cryptographic signature of the request, using the account password.
          xml:
            attribute: true
      xml:
        name: SignData
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    SignatureResponse:
      type: object
      required:
        - Signature
      properties:
        Signature:
          type: string
          description: Base64-encoded signature.
          xml:
            attribute: true
      xml:
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    GetCreatedContractsBody:
      type: object
      properties:
        offset:
          type: integer
          description: Offset into the list of contracts where response begins.
          xml:
            attribute: true
        maxCount:
          type: integer
          description: Maximum number of contracts to return.
          xml:
            attribute: true
      xml:
        name: GetCreatedContracts
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    ContractsResponse:
      type: object
      properties:
        Contracts:
          type: array
          nullable: true
          items:
            type: object
            description: The contract object
            xml:
              name: Contract
              attribute: false
          xml:
            name: Contracts
            wrapped: true
      xml:
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    AuthorizeAccessToContractBody:
      type: object
      required:
        - contractId
        - remoteId
        - authorized
      properties:
        contractId:
          type: string
          description: Identifier of the corresponding Smart Contract of the client, or for which the client is part.
          xml:
            attribute: true
        remoteId:
          type: string
          description: Identifier of the Legal Identity of the corresponding remote entity.
          xml:
            attribute: true
        authorized:
          type: boolean
          description: If the remote entity is authorized access to the corresponding contract or not.
          xml:
            attribute: true
      xml:
        name: AuthorizeAccessToContract
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    GetBalanceBody:
      type: object
      xml:
        name: GetBalance
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    GetBalanceResponse:
      type: object
      required:
        - amount
        - reserved
        - currency
        - timestamp
      properties:
        amount:
          type: number
          description: Current amount of eDaler that can be used.
          xml:
            attribute: true
        reserved:
          type: number
          description: Current amount of eDaler that has been reserved.
          xml:
            attribute: true
        currency:
          type: string
          description: Currency of wallet.
          xml:
            attribute: true
        timestamp:
          type: string
          format: date-time
          description: Timestamp of balance statement.
          xml:
            attribute: true
      xml:
        name: Balance
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    ProcessEDalerUriBody:
      type: object
      required:
        - uri
      properties:
        uri:
          type: string
          description: URI to process.
          xml:
            attribute: true
      xml:
        name: ProcessEDalerUri
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    ProcessResult:
      type: object
      required:
        - Balance
      properties:
        Balance:
          $ref: "#/components/schemas/GetBalanceResponse"
        Result:
          type: object
          description: The result of the process operation.
          additionalProperties: true
          xml:
            attribute: false
      xml:
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    GetServiceProvidersForBuyingEDalerBody:
      type: object
      xml:
        name: GetServiceProvidersForBuyingEDaler
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    GetServiceProvidersForSellingEDalerBody:
      type: object
      xml:
        name: GetServiceProvidersForSellingEDaler
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"

    GetPaymentOptionsForBuyingEDalerBody:
      type: object
      required:
        - serviceId
        - serviceProvider
      properties:
        serviceId:
          type: string
          description: ID of internal eDaler service.
          xml:
            attribute: true
        serviceProvider:
          type: string
          description: Type (class name) of service provider.
          xml:
            attribute: true
        successUrl:
          type: string
          format: uri
          description: URL to redirect to if the operation is successful.
          xml:
            attribute: true
        failureUrl:
          type: string
          format: uri
          description: URL to redirect to if the operation fails.
          xml:
            attribute: true
        cancelUrl:
          type: string
          format: uri
          description: URL to redirect to if the operation is cancelled.
          xml:
            attribute: true
        transactionId:
          type: string
          description: Transaction ID.
          xml:
            attribute: true
        tabId:
          type: string
          description: Tab ID.
          xml:
            attribute: true
        functionName:
          type: string
          description: Function name.
          xml:
            attribute: true
      xml:
        name: GetPaymentOptionsForBuyingEDaler
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"

    GetPaymentOptionsForSellingEDalerBody:
      type: object
      required:
        - serviceId
        - serviceProvider
      properties:
        serviceId:
          type: string
          description: ID of internal eDaler service.
          xml:
            attribute: true
        serviceProvider:
          type: string
          description: Type (class name) of service provider.
          xml:
            attribute: true
        successUrl:
          type: string
          format: uri
          description: URL to redirect to if the operation is successful.
          xml:
            attribute: true
        failureUrl:
          type: string
          format: uri
          description: URL to redirect to if the operation fails.
          xml:
            attribute: true
        cancelUrl:
          type: string
          format: uri
          description: URL to redirect to if the operation is cancelled.
          xml:
            attribute: true
        transactionId:
          type: string
          description: Transaction ID.
          xml:
            attribute: true
        tabId:
          type: string
          description: Tab ID.
          xml:
            attribute: true
        functionName:
          type: string
          description: Function name.
          xml:
            attribute: true
      xml:
        name: GetPaymentOptionsForSellingEDaler
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"

    InitiateBuyEDalerBody:
      type: object
      required:
        - serviceId
        - serviceProvider
        - amount
        - currency
      properties:
        serviceId:
          type: string
          description: ID of internal eDaler service.
          xml:
            attribute: true
        serviceProvider:
          type: string
          description: Type (class name) of service provider.
          xml:
            attribute: true
        amount:
          type: number
          format: double
          description: Amount of eDaler to buy.
          xml:
            attribute: true
        currency:
          type: string
          description: Currency to buy.
          xml:
            attribute: true
        successUrl:
          type: string
          description: URL to redirect to if the operation is successful.
          xml:
            attribute: true
        failureUrl:
          type: string
          description: URL to redirect to if the operation fails.
          xml:
            attribute: true
        cancelUrl:
          type: string
          description: URL to redirect to if the operation is cancelled.
          xml:
            attribute: true
        transactionId:
          type: string
          description: Transaction ID.
          xml:
            attribute: true
        tabId:
          type: string
          description: Tab ID.
          xml:
            attribute: true
      xml:
        name: InitiateBuyEDaler
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    InitiateSellEDalerBody:
      type: object
      required:
        - serviceId
        - serviceProvider
        - amount
        - currency
      properties:
        serviceId:
          type: string
          description: ID of internal eDaler service.
          xml:
            attribute: true
        serviceProvider:
          type: string
          description: Type (class name) of service provider.
          xml:
            attribute: true
        amount:
          type: number
          format: double
          description: Amount of eDaler to buy.
          xml:
            attribute: true
        currency:
          type: string
          description: Currency to buy.
          xml:
            attribute: true
        successUrl:
          type: string
          description: URL to redirect to if the operation is successful.
          xml:
            attribute: true
        failureUrl:
          type: string
          description: URL to redirect to if the operation fails.
          xml:
            attribute: true
        cancelUrl:
          type: string
          description: URL to redirect to if the operation is cancelled.
          xml:
            attribute: true
        transactionId:
          type: string
          description: Transaction ID.
          xml:
            attribute: true
        tabId:
          type: string
          description: Tab ID.
          xml:
            attribute: true
      xml:
        name: InitiateSellEDaler
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    TransactionInformation:
      type: object
      required:
        - id
        - state
        - started
        - ended
        - serviceId
        - serviceProvider
        - amount
        - currency
        - successUrl
        - failureUrl
        - cancelUrl
        - clientUrl
      properties:
        id:
          type: string
          description: Transaction ID.
          xml:
            attribute: true
        state:
          type: string
          description: Current state of transaction.
          xml:
            attribute: true
        started:
          type: string
          format: date-time
          description: When the transaction was started.
          xml:
            attribute: true
        ended:
          type: string
          format: date-time
          description: When the transaction ended.
          xml:
            attribute: true
        serviceId:
          type: string
          description: ID of internal eDaler service.
          xml:
            attribute: true
        serviceProvider:
          type: string
          description: Type (class name) of service provider.
          xml:
            attribute: true
        amount:
          type: number
          format: double
          description: Amount of eDaler to buy.
          xml:
            attribute: true
        currency:
          type: string
          description: Currency to buy.
          xml:
            attribute: true
        successUrl:
          type: string
          description: URL to redirect to if the operation is successful.
          xml:
            attribute: true
        failureUrl:
          type: string
          description: URL to redirect to if the operation fails.
          xml:
            attribute: true
        cancelUrl:
          type: string
          description: URL to redirect to if the operation is cancelled.
          xml:
            attribute: true
        clientUrl:
          type: string
          description: URL to redirect to if the operation is cancelled.
          xml:
            attribute: true
      xml:
        name: TransactionInformation
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    GetTransactionInformationBody:
      type: object
      required:
        - transactionId
      properties:
        transactionId:
          type: string
          description: Transaction ID.
          xml:
            attribute: true
        tabId:
          type: string
          description: Tab ID.
          xml:
            attribute: true
        functionName:
          type: string
          description: Function name.
          xml:
            attribute: true
      xml:
        name: GetTransactionInformation
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    GetTokensBody:
      type: object
      properties:
        offset:
          type: integer
          description: Offset into the list of tokens where response begins.
          xml:
            attribute: true
        maxCount:
          type: integer
          description: Maximum number of tokens to return.
          xml:
            attribute: true
        references:
          type: boolean
          description: If token references is sufficient (true, default), or if entire tokens are to be returned (false).
          xml:
            attribute: true
      xml:
        name: GetTokens
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    TokensResult:
      type: object
      properties:
        Tokens:
          type: object
          additionalProperties: true
          xml:
            attribute: false
            name: Tokens
      xml:
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    GetContractTokensBody:
      type: object
      required:
        - contractId
      properties:
        contractId:
          type: string
          description: Identity of contract to get tokens for.
          xml:
            attribute: true
        offset:
          type: integer
          description: Offset into the list where response begins.
          xml:
            attribute: true
        maxCount:
          type: integer
          description: Maximum number of tokens to return.
          xml:
            attribute: true
        references:
          type: boolean
          description: If token references is sufficient (true, default), or if entire tokens are to be returned (false).
          xml:
            attribute: true
      xml:
        name: GetContractTokens
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    GetCreationAttributesBody:
      type: object
      xml:
        name: GetCreationAttributes
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    CreationAttributes:
      type: object
      required:
        - currency
        - commision
        - trustProvider
      properties:
        currency:
          type: string
          description: Currency of wallet.
          xml:
            attribute: true
        commision:
          type: number
          format: double
          description: Commision to charge.
          xml:
            attribute: true
        trustProvider:
          type: string
          description: Trust provider to use.
          xml:
            attribute: true
      xml:
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    GetTokenBody:
      type: object
      required:
        - tokenId
      properties:
        tokenId:
          type: string
          description: Identity of token to get.
          xml:
            attribute: true
      xml:
        name: GetToken
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    TokenResult:
      type: object
      properties:
        Token:
          type: object
          additionalProperties: true
          xml:
            attribute: false
            name: Token
      xml:
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    GetDescriptionBody:
      type: object
      required:
        - tokenId
        - reportFormat
      properties:
        tokenId:
          type: string
          description: Identity of token to get description for.
          xml:
            attribute: true
        reportFormat:
          $ref: "#/components/schemas/reportFormat"
      xml:
        name: GetDescription
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    ReportResult:
      type: object
      required:
        - report
      properties:
        report:
          type: string
          description: Generated report.
          xml:
            attribute: true
      xml:
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    AddTextNoteBody:
      type: object
      required:
        - tokenId
        - note
        - personal
      properties:
        tokenId:
          type: string
          description: Identity of token to add text note to.
          xml:
            attribute: true
        note:
          type: string
          description: Text note to add.
          xml:
            attribute: true
        personal:
          type: boolean
          description: If the note is personal or note. Personal notes are deleted when the token changes owner.
          xml:
            attribute: true
      xml:
        name: AddTextNote
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    NoteResult:
      type: object
      required:
        - Note
      properties:
        Note:
          type: object
          additionalProperties: true
          xml:
            attribute: false
            name: Note
      xml:
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    AddXmlNoteBody:
      type: object
      required:
        - tokenId
        - note
        - personal
      properties:
        tokenId:
          type: string
          description: Identity of token to add XML note to.
          xml:
            attribute: true
        note:
          type: string
          description: XML note to add.
          xml:
            attribute: true
        personal:
          type: boolean
          description: If the note is personal or note. Personal notes are deleted when the token changes owner.
          xml:
            attribute: true
      xml:
        name: AddXmlNote
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    GetTokenEventsBody:
      type: object
      required:
        - tokenId
      properties:
        tokenId:
          type: string
          description: Identity of token to get events for.
          xml:
            attribute: true
        offset:
          type: integer
          description: Offset into the list where response begins.
          xml:
            attribute: true
        maxCount:
          type: integer
          description: Maximum number of events to return.
          xml:
            attribute: true
      xml:
        name: GetTokenEvents
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    EventsResult:
      type: object
      properties:
        Events:
          type: object
          additionalProperties: true
          xml:
            name: Events
      xml:
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    GetCurrentStateBody:
      type: object
      required:
        - tokenId
      properties:
        tokenId:
          type: string
          description: Identity of token to get current state for.
          xml:
            attribute: true
      xml:
        name: GetCurrentState
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    CreateReportBody:
      type: object
      required:
        - tokenId
        - reportType
        - reportFormat
      properties:
        tokenId:
          type: string
          description: Identity of token to get description for.
          xml:
            attribute: true
        reportType:
          type: string
          description: Type of report to generate.
          enum:
            - Present
            - Historsy
            - StateDiagram
            - Profiling
          xml:
            attribute: true
        reportFormat:
          $ref: "#/components/schemas/reportFormat"
      xml:
        name: CreateReport
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
    reportFormat:
      type: string
      description: Format of report.
      enum:
        - Html
        - Text
        - Xml
        - Markdown
        - Xaml
        - XamarinXaml
        - SmartContract
      xml:
        attribute: true
    StateResult:
      type: object
      properties:
        CurrentState:
          type: object
          additionalProperties: true
          xml:
            attribute: false
            name: CurrentState
      xml:
        namespace: "https://waher.se/Schema/BrokerAgent.xsd"
  responses:
    BadRequestResponse:
      description: Bad request, most probably due to the content sent in the request not conforming to the specification.
      content:
        text/plain:
          schema:
            type: string
    UnauthorizedResponse:
      description: Unauthorized access to a resource was prevented. Client must login first.
      content:
        text/plain:
          schema:
            type: string
    ForbiddenResponse:
      description: Forbidden access to resource was stopped. Client does not have sufficient privileges to access resource or perform requested action, or access is done using unencrypted, or a connection that is not sufficiently encrypted.
      content:
        text/plain:
          schema:
            type: string
    NotFoundResponse:
      description: Resource, or item referenced in request, was not found.
      content:
        text/plain:
          schema:
            type: string
    MethodNotAllowedResponse:
      description: Method not allowed. The method used in the request is not allowed for the resource.
      content:
        text/plain:
          schema:
            type: string
    NotAcceptableResponse:
      description: Content sent, or content requested in a format that is not supported by the resource.
      content:
        text/plain:
          schema:
            type: string
    TooManyRequestsResponse:
      description: Too many requests have been made, for this resource, or any of the referenced resources in the request.
      content:
        text/plain:
          schema:
            type: string
